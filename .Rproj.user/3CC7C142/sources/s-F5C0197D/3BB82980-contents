#ROBUSTNESS OF PARTITION
NMI<-vector()
for(i in 1:1000){
fg<-fastgreedy.community(as.undirected(theoreticalBB))
NMI[i]<-compare(fgTBB$membership,fg$membership,method="nmi")
  
}
NMI<-vector()
for(i in 1:100){
  fg<-fastgreedy.community(as.undirected(empiricalBB))
  NMI[i]<-compare(fgEBB$membership,fg$membership,method="nmi")
  
}

NMI<-vector()
for(i in 1:100){
  fg<-fastgreedy.community(as.undirected(allNetTheoretical))
  NMI[i]<-compare(fgTBB$membership,fg$membership,method="nmi")
  
}

NMI<-vector()
fg0<-fastgreedy.community(as.undirected(mapEremBB))
for(i in 1:100){
  fg<-fastgreedy.community(as.undirected(mapEremBB))
  NMI[i]<-compare(fg0$membership,fg$membership,method="nmi")
  
}

NMI<-vector()
fg0<-fastgreedy.community(as.undirected(mapTremBB))
for(i in 1:1000){
  fg<-fastgreedy.community(as.undirected(mapTremBB))
  NMI[i]<-compare(fg0$membership,fg$membership,method="nmi")
  
}


toFromT<-get.edges(theoreticalBB,E(theoreticalBB))
toFromTCluster<-data.frame(fgTBB$membership[toFromT[,1]],fgTBB$membership[toFromT[,2]])
toFromTCluster[toFromTCluster[,1]==6 & toFromTCluster[,2]==2,]

